<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技術 on The Mark Chang Life</title><link>https://cchmark.github.io/tags/%E6%8A%80%E8%A1%93/</link><description>Recent content in 技術 on The Mark Chang Life</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 31 Dec 2022 10:34:40 +0800</lastBuildDate><atom:link href="https://cchmark.github.io/tags/%E6%8A%80%E8%A1%93/index.xml" rel="self" type="application/rss+xml"/><item><title>2022 年度回顧</title><link>https://cchmark.github.io/posts/20221231annualreview/</link><pubDate>Sat, 31 Dec 2022 10:34:40 +0800</pubDate><guid>https://cchmark.github.io/posts/20221231annualreview/</guid><description>回顧一下2022年自己都在做什麼事情XD
技術 換新工作環境，我發現自己在資料結構和物件導向以及RESTful的相關知識不夠扎實，導致我在撰寫Code時常常有些困難或是莫名的小瓶頸。對於撰寫出來Code理解不夠透徹，以至於主管Code Review時常回答出來的內容不是夠充分和明確。因此，購買Udemy線上課程以及SkillTree課程，以彌補自己的不足。
C# Udemy C# Basics for Beginners: Learn C# Fundamentals by Coding Master C# fundamentals in 6 hours - The most popular course with 50,000+ students, packed with tips and exercises!</description></item><item><title>Dapper 常用語法</title><link>https://cchmark.github.io/posts/20221206csharpbydapper/</link><pubDate>Tue, 06 Dec 2022 09:56:44 +0800</pubDate><guid>https://cchmark.github.io/posts/20221206csharpbydapper/</guid><description>使用Dapper Transaction 和 Bulk Insert 介紹 Dapper Transaction 範例 public class Customer { public int CustomerID {get;set;} public string CustomerName {get;set;} public string ContactName {get;set;} public string Address {get;set;} public string City {get;set;} public string PostalCode {get;set;} public string Country {get;set;} } using (var connection = new SqlConnection(connectionString)) { connection.</description></item><item><title>如何應用Dapper</title><link>https://cchmark.github.io/posts/20221124csarpbydapper/</link><pubDate>Thu, 24 Nov 2022 16:04:39 +0800</pubDate><guid>https://cchmark.github.io/posts/20221124csarpbydapper/</guid><description>Dappar 常用方法 public class Customer { public int CustomerID {get;set;} public string CustomerName {get;set;} public string ContactName {get;set;} public string Address {get;set;} public string City {get;set;} public string PostalCode {get;set;} public string Country {get;set;} } //Dapper using (var connection = new SqlConnection(ConnectionString)) { //Query 型別說明 //沒給型別 回傳值IEnumerable&amp;lt;dynamic&amp;gt; IEnumerable&amp;lt;dynamic&amp;gt; orderDetails = connection.</description></item><item><title>Dapper是什麼?</title><link>https://cchmark.github.io/posts/20221117csharp/</link><pubDate>Thu, 17 Nov 2022 10:41:06 +0800</pubDate><guid>https://cchmark.github.io/posts/20221117csharp/</guid><description>ASP.NET Dapper 介紹 工作上常聽到Dapper，但不知道這個套件實際如何使用，所以寫一篇學習筆記XD
Dapper介紹 Dapper是Microsoft .NET平台的物件關聯對應ORM(object-relational mapping)套件：它提供了一個將對象資料映射到資料庫的框架。Dapper 是免費的開源軟件，在License部分為Apache License 2.</description></item><item><title>C# 語法糖 yield return</title><link>https://cchmark.github.io/posts/20221110csharp/</link><pubDate>Thu, 10 Nov 2022 09:27:19 +0800</pubDate><guid>https://cchmark.github.io/posts/20221110csharp/</guid><description>C# Yield Return Yield Return 介紹 Yield 是指 Microsoft .Net 中用來實作 iterator(迭代器) 設計模式的語法糖，透過編輯器自動產生的IEnumerator衍生類別，並且實作方法。</description></item><item><title>C# 常用讀寫筆記</title><link>https://cchmark.github.io/posts/20221107csharp/</link><pubDate>Mon, 07 Nov 2022 11:33:55 +0800</pubDate><guid>https://cchmark.github.io/posts/20221107csharp/</guid><description>C#讀寫檔應用 TXT 讀檔 private string checkToken() { if (File.Exists(tokenPath)) { DateTime dt = File.</description></item><item><title>C# RestSharp套件 筆記</title><link>https://cchmark.github.io/posts/20221102csharp/</link><pubDate>Wed, 02 Nov 2022 11:29:41 +0800</pubDate><guid>https://cchmark.github.io/posts/20221102csharp/</guid><description>RestSharp 應用說明 筆記一下~
var client = new RestClient(&amp;#34;http://example.com&amp;#34;); //為身分驗證器新增 帳號 密碼 //client.</description></item><item><title>C# NPOI 應用</title><link>https://cchmark.github.io/posts/20221024csharp/</link><pubDate>Mon, 24 Oct 2022 15:32:12 +0800</pubDate><guid>https://cchmark.github.io/posts/20221024csharp/</guid><description>CSVToDataTable 指定某字串為結束位置 筆記一下NPOI 轉 DataTable 字串之中有換行符號導致提前讀取結束，指定結束位置的對應字串
public static DataTable CsvToDataTableByNewEgg(string fileName) { DataTable dataTable = new DataTable(); try { using (StreamReader sr = new StreamReader(fileName)) { char[] separators = new char[] { &amp;#39;#&amp;#39;, &amp;#39;&amp;#34;&amp;#39;, &amp;#39; &amp;#39; }; string[] columnheaders = sr.</description></item><item><title>C# 簡化List 新增資料 小技巧</title><link>https://cchmark.github.io/posts/20221003csharp/</link><pubDate>Mon, 03 Oct 2022 15:11:37 +0800</pubDate><guid>https://cchmark.github.io/posts/20221003csharp/</guid><description>C# List Add 擴充方法 小技巧 //限制必須使用執行個體方法或是擴充方法的狀況 集合初始設定式的 Add 擴充方法 static void Main(string[] args) { //以前需要這樣寫 //var people = new List&amp;lt;Person&amp;gt;{ new Person { Name = &amp;#34;Mark49&amp;#34;, Age = 24 }, new Person { Name = &amp;#34;Sherry&amp;#34;, Age = 20 }}; //現在透過Add擴充方法 可以簡化如下新增 List 資料 var people = new List&amp;lt;Person&amp;gt; { { &amp;#34;Mark49&amp;#34;, 24 },{&amp;#34;Sherry&amp;#34; ,20} }; Display(people); } private static void Display(IEnumerable&amp;lt;Person&amp;gt; source) { foreach (var p in source) { Console.</description></item><item><title>C# 何謂集合(Collections)</title><link>https://cchmark.github.io/posts/20220926csharp/</link><pubDate>Mon, 26 Sep 2022 10:16:57 +0800</pubDate><guid>https://cchmark.github.io/posts/20220926csharp/</guid><description>C# 何謂集合(Collections) 集合有兩種使用方式 1.建立物件的陣列(Array) 陣列(Array): 需相同型別的集合，並透過引索取得資料內容。長度是固定的。用途適用於建立和處理固定數目的強類型物件
//一般宣告陣列，可以初始化陣列。 不需要長度規範，因為它可以由清單中的內容做推斷。 int[] ints1 = new int[] {1,2,3 }; string[] strings1 = new string[] { &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34; }; //宣告時，初始化陣列時避免 new 運算式和陣列類型，稱為隱含型別陣列宣告(編譯器會自行推測型別) int[] numbers = { 1, 2, 3, 4, 5 }; string[] strings = { &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34; }; 從陣列(Array)取得資料 透過索引取得陣列的資料</description></item><item><title>C# .NET 型別</title><link>https://cchmark.github.io/posts/20220920csharpoop/</link><pubDate>Tue, 20 Sep 2022 10:24:24 +0800</pubDate><guid>https://cchmark.github.io/posts/20220920csharpoop/</guid><description>C# .NET 型別 參考型別(Reference Type) 參考類型的變數會儲存期資料 (物件) 的參考，使用參考類型時，可以使兩個變數參考相同的物件，因此對其中一個變數進行的內容變更，可能會影響另一個變數所參考的物件。 但使用實值型別時，每個變數都有自己的資料(Stack)，因此對某一個變數進行的內容變更，不會影響另一個變數。
換句話說，當宣告變數時，值是Stack存放的是一個參考，指向真正的值存在的Heap區域。 參考型別常用名稱如下所示: 型態類別 關鍵字 類別 Class 介面 Interface 委派 delegate 動態 dynamic 物件 object 字串 String 紀錄 record 實值型別(Value Type) 實值型別的變數，依據預設在指派時，將引數傳遞至方法，並傳回方法結果時，會複製變數值。 在實值型別變數的情況下，會複製對應的類型實例。</description></item><item><title>20220704Python_learning_Part3</title><link>https://cchmark.github.io/posts/20220704python_learning_part3/</link><pubDate>Mon, 04 Jul 2022 14:04:00 +0800</pubDate><guid>https://cchmark.github.io/posts/20220704python_learning_part3/</guid><description>#居家上班滑鼠自動移動位置
1.套件安裝 pip install pynput pip install pyautogui
2.code from pynput.</description></item><item><title>20220704Python_learning_Part2</title><link>https://cchmark.github.io/posts/20220704python_learning_part2/</link><pubDate>Mon, 04 Jul 2022 13:20:59 +0800</pubDate><guid>https://cchmark.github.io/posts/20220704python_learning_part2/</guid><description>Selenium + WebDriver 安裝 1.Selenium 安裝 在python裡執行以下程式碼，即可安裝Selenium套件。 pip install selenium</description></item><item><title>20220704Python_learning</title><link>https://cchmark.github.io/posts/20220704python_learning/</link><pubDate>Mon, 04 Jul 2022 10:36:37 +0800</pubDate><guid>https://cchmark.github.io/posts/20220704python_learning/</guid><description>#上班逛到鐵人賽文章發現非常趣味的文章,紀錄一下過程~XDDDD
1.確認安裝好基本 Python 開發環境，以及 pip Python 套件管理工具。
2.從 Windows 開始選單中，打開「Windows 系統」中的「命令提示字元」。</description></item><item><title>MVC5 bootstrap 3 更新 bootstrap 5 紀錄</title><link>https://cchmark.github.io/posts/20220628csharpmvc/</link><pubDate>Tue, 28 Jun 2022 15:39:27 +0800</pubDate><guid>https://cchmark.github.io/posts/20220628csharpmvc/</guid><description>#MVC5 bootstrap 3 更新 bootstrap 5
We replaced the following:</description></item></channel></rss>