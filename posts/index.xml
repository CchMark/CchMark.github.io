<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on The Mark Chang Life</title><link>https://cchmark.github.io/posts/</link><description>Recent content in Posts on The Mark Chang Life</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 07 May 2025 20:06:29 +0800</lastBuildDate><atom:link href="https://cchmark.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>2025 05 07 關注點分離應用筆記</title><link>https://cchmark.github.io/posts/2025-05-07-post/</link><pubDate>Wed, 07 May 2025 20:06:29 +0800</pubDate><guid>https://cchmark.github.io/posts/2025-05-07-post/</guid><description>✅ 關注點分離 SOP（適用於所有後端應用） 步驟一：先問自己「這段邏輯在做什麼？」 這是核心判斷點。你會發現大多數邏輯屬於以下 3 種責任之一：
類型 說明 對應層 流程控制 調用哪些動作、順序、條件 Main、JobTask、Controller 商業邏輯 怎麼處理資料、去重、合併、轉換 Service 資料存取 跟 DB、FTP、API 的溝通 Repository 展示與匯出 Excel、CSV、HTML 回傳等 ExportService / ViewModel 工具與共用功能 清文字、計算欄位、轉格式 Helper 或 Utils 📌 技巧 I/O 關注點：看到 SqlConnection、File.</description></item><item><title>20230707 升版筆記</title><link>https://cchmark.github.io/posts/20230707diary/</link><pubDate>Fri, 07 Jul 2023 19:03:37 +0800</pubDate><guid>https://cchmark.github.io/posts/20230707diary/</guid><description>升級步驟 筆記一下~紀錄升級流程步驟XD
1. 修改 HUGO_DEPLOY.yml 在HUGO_DEPLOY.yml檔案中，需要做修改。
runs-on: ubuntu-18.04 將上述行修改為：
runs-on: ubuntu-22.</description></item><item><title>20230516 TypeScript Note</title><link>https://cchmark.github.io/posts/20230516diary/</link><pubDate>Tue, 16 May 2023 19:45:23 +0800</pubDate><guid>https://cchmark.github.io/posts/20230516diary/</guid><description>型別 主要分別有物件型別 (Object Type)以及原始型別 (Primitive Type) 物件型別 物件型別的特性是能有屬性 (Property)
原生物件(Native):函式(Function)、陣列(Array)、日期(Date)等&amp;hellip; 宿主物件 (Host Objects)： Window、Document、Navigator等&amp;hellip; 建立物件 var car = {}; //物件 (Object) 擴充屬性 car.</description></item><item><title>前端效能調校筆記 Part 1</title><link>https://cchmark.github.io/posts/20230211/</link><pubDate>Sat, 11 Feb 2023 20:14:18 +0800</pubDate><guid>https://cchmark.github.io/posts/20230211/</guid><description>前端常見專有名詞 AVIF : 是一種圖像格式，旨在提供比 JPEG 和 PNG 更高的圖像質量和更快的加載速度。 Chrome 用戶體驗報告 CrUX :（Chrome User Experience Report）是由 Google 收集的全球用戶體驗數據，旨在幫助開發人員了解他們網站的性能和用戶體驗。 網站核心指標 Core Web Vitals : 關鍵的用戶體驗指標，旨在幫助開發人員改善網站的速度、互動性和可靠性。 累積佈局偏移 CLS :（Cumulative Layout Shift）是一個代表網頁布局不穩定性的指標，用於評估網頁中元素的穩定性。 維度 Dimension : 是 DevTools 中用於檢測網頁元素的大小和位置的工具。著重在「什麼」會影響使用者體驗。且維度是不可以量化的觀察方向。 首次內容繪製時間 FCP:（First Contentful Paint）是一個代表網頁首次渲染速度的指標。 首次輸入延遲 FID :（First Input Delay）是一個代表網頁第一次互動速度的指標。 場域資料 Field Data : 是真實用戶的網頁性能數據，比實驗室數據（Lab Data）更加真實和可靠。 卡頓 Jank : 是指用戶介面的執行緩慢，主因是主執行緒的執行過久、或是遭到封鎖的渲染、或是在背景處理上，花費太多的處理器能力。也就是俗稱的「卡頓」現象。 實驗室資料 Lab Data : 是在實驗室模擬用戶環境下收集的網頁性能數據，不一定代表真實用戶體驗。 延遲載入 Lazy load : 是一種網頁性能優化技術，只在用戶對網頁元素進行操作時加載，以提高加載速度和降低帶寬使用。 最大內容繪製 LCP :（Largest Contentful Paint）是一個代表網頁首次渲染最大內容速度的指標。 燈塔 Lighthouse : 是一個開源的網頁性能評估工具，幫助開發人員評估網站的速度、可用性和檢測 SEO 問題。 指標 Metric : 是一個代表網頁性能的指標，如加載速度、布局穩定性等。著重在對使用者體驗影響有「多少」。 Partytown : 是一個前端應用程式平台，它可以協助建立高效能的網站。使用Partytown中的工具和技術，快速創建和部署漂亮且高效率的網站。 Preconnect : 預先連接所需來源，通過預先連接提高頁面載入速度。 Preload : 當網頁需要盡早取得資源時，可在背景預先載入，並預載的 JS / CSS 都不會真的執行，只會被背景下載。且下載過程不會佔用主執行緒。 SVG :（Scalable Vector Graphics）是一種矢量圖形格式，可以在網頁上進行縮放而不會失真。 總阻塞時間 TBT :（Total Blocking Time）是一個代表網頁首次可互動時間的指標。 第一個Byte載入時間 TTFB :（Time to First Byte）是一個代表網頁首次字節回應時間的指標。 -可互動時間 TTI :（Time to Interactive）是一個代表網頁首次可互動時間的指標。 WebP : 是一種用於網頁的圖像格式，具有較小的文件大小和更高的圖像質量。 Web Font : 是一種用於網頁的字體，可以讓網頁內容具有統一的字體外觀。 Web Vitals : 是一組重要的網頁性能指標，包括 LCP，TBT 和 TTI 等。 Web Workers : 是一種 JavaScript API，可以在網頁的背景進行複雜的計算任務，以提高網頁性能和體驗。 常見效能調教工具 Lighthouse Chrome &amp;amp; Edge 內建，以電腦上的資源評量網站的效能指標 PageSpeed Insights 透過線上工具取得目標網站效能指標 Performance Audits 關於效能的評量指標說明與優化建議 Will 保哥~前端效能調校實戰：使用 Lighthouse 改善你的網站瀏覽體驗</description></item><item><title>2022 年度回顧</title><link>https://cchmark.github.io/posts/20221231annualreview/</link><pubDate>Sat, 31 Dec 2022 10:34:40 +0800</pubDate><guid>https://cchmark.github.io/posts/20221231annualreview/</guid><description>回顧一下2022年自己都在做什麼事情XD
技術 換新工作環境，我發現自己在資料結構和物件導向以及RESTful的相關知識不夠扎實，導致我在撰寫Code時常常有些困難或是莫名的小瓶頸。對於撰寫出來Code理解不夠透徹，以至於主管Code Review時常回答出來的內容不是夠充分和明確。因此，購買Udemy線上課程以及SkillTree課程，以彌補自己的不足。
C# Udemy C# Basics for Beginners: Learn C# Fundamentals by Coding Master C# fundamentals in 6 hours - The most popular course with 50,000+ students, packed with tips and exercises!</description></item><item><title>建置GoogleCloud環境</title><link>https://cchmark.github.io/posts/20221227concatenatedgooglesheetapi/</link><pubDate>Tue, 27 Dec 2022 10:44:49 +0800</pubDate><guid>https://cchmark.github.io/posts/20221227concatenatedgooglesheetapi/</guid><description>→
GoogleSheet 環境建置 STEP 1 : 建立GOOGLE Cloud 先建立專案 https://console.cloud.google.com/apis/dashboard 第一次使用的可能會看到這個先同意即可 建立專案名稱 STEP 2 : 啟用GOOGLE SHEET API 服務 無腦下一步XD STEP 3 : 啟用GOOGLE SHEET OAuth 用戶ID</description></item><item><title>ASP.NET Core 6 Mvc 學習筆記 Day 2-2</title><link>https://cchmark.github.io/posts/20221208net6codemvcbypartialview/</link><pubDate>Thu, 08 Dec 2022 14:39:05 +0800</pubDate><guid>https://cchmark.github.io/posts/20221208net6codemvcbypartialview/</guid><description>Partial View 部分檢視 主要應用於HTML重用,由於Partial View 無法取得Model需要透過外部呼叫 透過Model傳遞才能取得資料綁定 通常預設情境下子類別會自動繼承父類別的Model 呼叫方式: //tag helper &amp;lt;partial name=&amp;#34;something&amp;#34;&amp;gt; //html helper 個人偏好使用這個XD @Html.</description></item><item><title>ASP.NET Core 6 Mvc 學習筆記 Day 2</title><link>https://cchmark.github.io/posts/20221208net6codemvc/</link><pubDate>Thu, 08 Dec 2022 09:46:01 +0800</pubDate><guid>https://cchmark.github.io/posts/20221208net6codemvc/</guid><description>.NET 6 如何讀取AppSettings AppSettings 由於.Net code 捨棄 Web.config 改為前端常用的JSON格式作為設定檔 好處的部分:</description></item><item><title>ASP.NET Core 6 Mvc 學習筆記 Day 1</title><link>https://cchmark.github.io/posts/20221207net6codemvc/</link><pubDate>Wed, 07 Dec 2022 14:15:19 +0800</pubDate><guid>https://cchmark.github.io/posts/20221207net6codemvc/</guid><description>什麼是MVC MVC 是三個部分組成的 Model 模型 View 檢視 Controller 控制器 Model 模型 主要資料處理的部分.</description></item><item><title>Dapper 常用語法</title><link>https://cchmark.github.io/posts/20221206csharpbydapper/</link><pubDate>Tue, 06 Dec 2022 09:56:44 +0800</pubDate><guid>https://cchmark.github.io/posts/20221206csharpbydapper/</guid><description>使用Dapper Transaction 和 Bulk Insert 介紹 Dapper Transaction 範例 public class Customer { public int CustomerID {get;set;} public string CustomerName {get;set;} public string ContactName {get;set;} public string Address {get;set;} public string City {get;set;} public string PostalCode {get;set;} public string Country {get;set;} } using (var connection = new SqlConnection(connectionString)) { connection.</description></item><item><title>Visual Studio 小技巧</title><link>https://cchmark.github.io/posts/20221201toolstips/</link><pubDate>Thu, 01 Dec 2022 16:49:20 +0800</pubDate><guid>https://cchmark.github.io/posts/20221201toolstips/</guid><description>Visual Studio 好用設定與技巧 Shift+Alt+. 往下選取相同的文字 Shift+Alt+; 全選相同的文字 Ctrl+Shift+insert 循環剪貼簿(GUI) Shift+Enter 文字插入點跳到下一行 Ctrl + F12 移動至實作 Visual Studio 文字設定 選項 → 環境 → 字型和色彩 → 字型下拉框 → 選擇 Cascadia Code 大小 12 這樣設定對眼睛比較舒服XD</description></item><item><title>如何應用Dapper</title><link>https://cchmark.github.io/posts/20221124csarpbydapper/</link><pubDate>Thu, 24 Nov 2022 16:04:39 +0800</pubDate><guid>https://cchmark.github.io/posts/20221124csarpbydapper/</guid><description>Dappar 常用方法 public class Customer { public int CustomerID {get;set;} public string CustomerName {get;set;} public string ContactName {get;set;} public string Address {get;set;} public string City {get;set;} public string PostalCode {get;set;} public string Country {get;set;} } //Dapper using (var connection = new SqlConnection(ConnectionString)) { //Query 型別說明 //沒給型別 回傳值IEnumerable&amp;lt;dynamic&amp;gt; IEnumerable&amp;lt;dynamic&amp;gt; orderDetails = connection.</description></item><item><title>Dapper是什麼?</title><link>https://cchmark.github.io/posts/20221117csharp/</link><pubDate>Thu, 17 Nov 2022 10:41:06 +0800</pubDate><guid>https://cchmark.github.io/posts/20221117csharp/</guid><description>ASP.NET Dapper 介紹 工作上常聽到Dapper，但不知道這個套件實際如何使用，所以寫一篇學習筆記XD
Dapper介紹 Dapper是Microsoft .NET平台的物件關聯對應ORM(object-relational mapping)套件：它提供了一個將對象資料映射到資料庫的框架。Dapper 是免費的開源軟件，在License部分為Apache License 2.</description></item><item><title>C# 語法糖 yield return</title><link>https://cchmark.github.io/posts/20221110csharp/</link><pubDate>Thu, 10 Nov 2022 09:27:19 +0800</pubDate><guid>https://cchmark.github.io/posts/20221110csharp/</guid><description>C# Yield Return Yield Return 介紹 Yield 是指 Microsoft .Net 中用來實作 iterator(迭代器) 設計模式的語法糖，透過編輯器自動產生的IEnumerator衍生類別，並且實作方法。</description></item><item><title>C# 常用讀寫筆記</title><link>https://cchmark.github.io/posts/20221107csharp/</link><pubDate>Mon, 07 Nov 2022 11:33:55 +0800</pubDate><guid>https://cchmark.github.io/posts/20221107csharp/</guid><description>C#讀寫檔應用 TXT 讀檔 private string checkToken() { if (File.Exists(tokenPath)) { DateTime dt = File.</description></item><item><title>辦別IEnumerable和List用途</title><link>https://cchmark.github.io/posts/20221104csharppart2/</link><pubDate>Fri, 04 Nov 2022 16:01:16 +0800</pubDate><guid>https://cchmark.github.io/posts/20221104csharppart2/</guid><description>IEnumerable 和 List 區別 IEnumerable 與 List 差異 C# 中 IEnumerable 和 List 的主要區別在於 IEnumerable 是一個介面，而 List 是一個具體的class可以new 出來實作。此外， IEnumerable 是只讀的，而 List 不是。 List 提供Add、Clear、Contains、IndexOf、RemoveAt、Count等方法，而 IEnumerable 提供了一個介面來接收集合資料，用於逐一讀取集合中的資料內容（枚舉）。</description></item><item><title>C# 透過Linq實作分頁功能</title><link>https://cchmark.github.io/posts/20221104csharp/</link><pubDate>Fri, 04 Nov 2022 11:19:03 +0800</pubDate><guid>https://cchmark.github.io/posts/20221104csharp/</guid><description>C# 如何做分頁 //每頁顯示資料 const int pageSize = 2; //頁碼 初始0 為 畫面呈現時的第一頁 int pageNum = 0; //建立array 資料 string[] names = { &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;, &amp;#34;f&amp;#34;, &amp;#34;g&amp;#34;, &amp;#34;h&amp;#34;, &amp;#34;i&amp;#34;,&amp;#34;j&amp;#34;,&amp;#34;k&amp;#34; }; while (pageNum * pageSize &amp;lt; names.</description></item><item><title>C# RestSharp套件 筆記</title><link>https://cchmark.github.io/posts/20221102csharp/</link><pubDate>Wed, 02 Nov 2022 11:29:41 +0800</pubDate><guid>https://cchmark.github.io/posts/20221102csharp/</guid><description>RestSharp 應用說明 筆記一下~
var client = new RestClient(&amp;#34;http://example.com&amp;#34;); //為身分驗證器新增 帳號 密碼 //client.</description></item><item><title>C# NPOI 應用</title><link>https://cchmark.github.io/posts/20221024csharp/</link><pubDate>Mon, 24 Oct 2022 15:32:12 +0800</pubDate><guid>https://cchmark.github.io/posts/20221024csharp/</guid><description>CSVToDataTable 指定某字串為結束位置 筆記一下NPOI 轉 DataTable 字串之中有換行符號導致提前讀取結束，指定結束位置的對應字串
public static DataTable CsvToDataTableByNewEgg(string fileName) { DataTable dataTable = new DataTable(); try { using (StreamReader sr = new StreamReader(fileName)) { char[] separators = new char[] { &amp;#39;#&amp;#39;, &amp;#39;&amp;#34;&amp;#39;, &amp;#39; &amp;#39; }; string[] columnheaders = sr.</description></item><item><title>Postman 建立測試環境</title><link>https://cchmark.github.io/posts/20221006tools/</link><pubDate>Thu, 06 Oct 2022 16:11:52 +0800</pubDate><guid>https://cchmark.github.io/posts/20221006tools/</guid><description>建立Postman API Mock Server 主要應用在前後端分離的架構下，前端在完成網頁畫面的切版後，需要等待後端給API的規格。所以使用Postman Mock Server 初步設計API傳值結構以及回傳值結構供前端Mock。 待後端完成相關實作完成，後續只要替換網址做測試了。
好處:</description></item><item><title>C# 簡化List 新增資料 小技巧</title><link>https://cchmark.github.io/posts/20221003csharp/</link><pubDate>Mon, 03 Oct 2022 15:11:37 +0800</pubDate><guid>https://cchmark.github.io/posts/20221003csharp/</guid><description>C# List Add 擴充方法 小技巧 //限制必須使用執行個體方法或是擴充方法的狀況 集合初始設定式的 Add 擴充方法 static void Main(string[] args) { //以前需要這樣寫 //var people = new List&amp;lt;Person&amp;gt;{ new Person { Name = &amp;#34;Mark49&amp;#34;, Age = 24 }, new Person { Name = &amp;#34;Sherry&amp;#34;, Age = 20 }}; //現在透過Add擴充方法 可以簡化如下新增 List 資料 var people = new List&amp;lt;Person&amp;gt; { { &amp;#34;Mark49&amp;#34;, 24 },{&amp;#34;Sherry&amp;#34; ,20} }; Display(people); } private static void Display(IEnumerable&amp;lt;Person&amp;gt; source) { foreach (var p in source) { Console.</description></item><item><title>C# 何謂集合(Collections)</title><link>https://cchmark.github.io/posts/20220926csharp/</link><pubDate>Mon, 26 Sep 2022 10:16:57 +0800</pubDate><guid>https://cchmark.github.io/posts/20220926csharp/</guid><description>C# 何謂集合(Collections) 集合有兩種使用方式 1.建立物件的陣列(Array) 陣列(Array): 需相同型別的集合，並透過引索取得資料內容。長度是固定的。用途適用於建立和處理固定數目的強類型物件
//一般宣告陣列，可以初始化陣列。 不需要長度規範，因為它可以由清單中的內容做推斷。 int[] ints1 = new int[] {1,2,3 }; string[] strings1 = new string[] { &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34; }; //宣告時，初始化陣列時避免 new 運算式和陣列類型，稱為隱含型別陣列宣告(編譯器會自行推測型別) int[] numbers = { 1, 2, 3, 4, 5 }; string[] strings = { &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34; }; 從陣列(Array)取得資料 透過索引取得陣列的資料</description></item><item><title>C# .NET 型別</title><link>https://cchmark.github.io/posts/20220920csharpoop/</link><pubDate>Tue, 20 Sep 2022 10:24:24 +0800</pubDate><guid>https://cchmark.github.io/posts/20220920csharpoop/</guid><description>C# .NET 型別 參考型別(Reference Type) 參考類型的變數會儲存期資料 (物件) 的參考，使用參考類型時，可以使兩個變數參考相同的物件，因此對其中一個變數進行的內容變更，可能會影響另一個變數所參考的物件。 但使用實值型別時，每個變數都有自己的資料(Stack)，因此對某一個變數進行的內容變更，不會影響另一個變數。
換句話說，當宣告變數時，值是Stack存放的是一個參考，指向真正的值存在的Heap區域。 參考型別常用名稱如下所示: 型態類別 關鍵字 類別 Class 介面 Interface 委派 delegate 動態 dynamic 物件 object 字串 String 紀錄 record 實值型別(Value Type) 實值型別的變數，依據預設在指派時，將引數傳遞至方法，並傳回方法結果時，會複製變數值。 在實值型別變數的情況下，會複製對應的類型實例。</description></item><item><title>20220704Python_learning_Part3</title><link>https://cchmark.github.io/posts/20220704python_learning_part3/</link><pubDate>Mon, 04 Jul 2022 14:04:00 +0800</pubDate><guid>https://cchmark.github.io/posts/20220704python_learning_part3/</guid><description>#居家上班滑鼠自動移動位置
1.套件安裝 pip install pynput pip install pyautogui
2.code from pynput.</description></item><item><title>20220704Python_learning_Part2</title><link>https://cchmark.github.io/posts/20220704python_learning_part2/</link><pubDate>Mon, 04 Jul 2022 13:20:59 +0800</pubDate><guid>https://cchmark.github.io/posts/20220704python_learning_part2/</guid><description>Selenium + WebDriver 安裝 1.Selenium 安裝 在python裡執行以下程式碼，即可安裝Selenium套件。 pip install selenium</description></item><item><title>20220704Python_learning</title><link>https://cchmark.github.io/posts/20220704python_learning/</link><pubDate>Mon, 04 Jul 2022 10:36:37 +0800</pubDate><guid>https://cchmark.github.io/posts/20220704python_learning/</guid><description>#上班逛到鐵人賽文章發現非常趣味的文章,紀錄一下過程~XDDDD
1.確認安裝好基本 Python 開發環境，以及 pip Python 套件管理工具。
2.從 Windows 開始選單中，打開「Windows 系統」中的「命令提示字元」。</description></item><item><title>MVC5 bootstrap 3 更新 bootstrap 5 紀錄</title><link>https://cchmark.github.io/posts/20220628csharpmvc/</link><pubDate>Tue, 28 Jun 2022 15:39:27 +0800</pubDate><guid>https://cchmark.github.io/posts/20220628csharpmvc/</guid><description>#MVC5 bootstrap 3 更新 bootstrap 5
We replaced the following:</description></item><item><title>2022-03-08日記</title><link>https://cchmark.github.io/posts/20220308post/</link><pubDate>Tue, 08 Mar 2022 11:15:01 +0800</pubDate><guid>https://cchmark.github.io/posts/20220308post/</guid><description>學習這條路很廣，喜歡什麼技術不重要，重要的是你肯花時間去學習， 總有一天你會發現原來我曾經有接觸並在無形之中成長。</description></item><item><title>Hello World</title><link>https://cchmark.github.io/posts/hello-world/</link><pubDate>Mon, 10 Jan 2022 16:12:51 +0800</pubDate><guid>https://cchmark.github.io/posts/hello-world/</guid><description>Just keep going straight!</description></item></channel></rss>